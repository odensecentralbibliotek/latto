// Mixins used in the other stylesheets.
////
// Compass version 0.12.2 (Alnilam)

$prefixes: ("-webkit-","-moz-", "-o-", "");

// Adds trailing margin.
//
// $amount - The amount of margin appended to the bottom.
//
// Compatible in IE9+, Firefox 1+, Opera 9,2+, Chrome 2+x, Safari 1,3+.
@mixin append-bottom($amount: $default-spacing) {
  margin-bottom: $amount;
}

// Adds leading margin.
//
// $amount - The amount of margin appended to the top.
//
// Compatible in IE9+, Firefox 1+, Opera 9,2+, Chrome 2+, Safari 1,3+.
@mixin prepend-top($amount: $default-spacing) {
  margin-top: $amount;
}

// Add default Latto styling to an HTML <HR> ruler across any column.
//
// $border-color - The color of the HTML ruler.
//
// Compatible in IE9+, Firefox 3,5+, Opera 9,5+, Chrome 4+, Safari 3,1+.
@mixin colruler($border-color: $gray) {
  background: $border-color;
  color: $border-color;
  clear: both;
  float: none;
  width: 100%;
  height: 0.1em;
  border: none;
  @include prepend-top($default-spacing/2);
  @include append-bottom($default-spacing/2);
 }

// Mixin for transparent backgrounds, maing it cross browser compatible
// including IE8+. (https://gist.github.com/1949202)
//
// $color - The color of the background.
// $alpha - The alpha value for transparency.
//
// Compatible in IE8+, Firefox 1+, Opera 9,2+, Chrome 2+, Safari 3,1+.
@mixin rgba-background($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: $rgba;
  zoom: 1;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
}

// Mixin for the CSS ::selection, which allows specify selected text background
// color.
//
// $color - The color for the selected text.
// $background - The background color for the selected text.
//
// Compatible in IE9+, Opera 9,2+, Chrome 5+, Safari 3+.
@mixin selection($color, $background) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background: $background;
    }
  }
}

// Add a backup background color for IE
// Placed at top so it comes before background-image
@mixin ie-gradient-fix($background, $svg: true) {
  background: $background;

  @if $svg == true {
    $experimental-support-for-svg: $svg;
  }
}

// Places an icon and a button inside a textfield. The button will be placed right,
// inline with the text, while the icon (if any) will be placed before the text in the left side.
// 
// The wrapper you passes to thin mixin, must contain at least a textfield and a button.
//
// $wrapper: ID or Class on the wrapper element.
// $height: Height on the textfield. Icon and button height will be calculated from this value.
@mixin input-inline($height: 30px) {  
  position: relative;
  
  // Style the input field inside the wrapper.
  .form-text {
    @include rem('font-size', $height * .5);   
    @include box-sizing(border-box);
    
    height: $height;
    width: 100%; 
  }
  // Style the submit button inside the wrapper.
  .form-actions {
    position: absolute;
    top: 4px;
    right: 4px;
    input {
      height: $height - 8px;
      line-height: $height - 16px;
      padding-right: $height / 2;
      padding-left: $height / 2; 
      width: 100%;
    }
  }
  
  // Checks if there is an icon inside the wrapper.
  @if i != null {
    i {
      @include rem('font-size', $height * .5);
      
      left: $height * 0.25;
      position: absolute;      
      top: $height * 0.25;      
      
      color: $gray-dark;
    } 
    .form-text {
      padding-left: $height * .8;  
    }
  }
}

// Mixin that converts pixel values to rem values for whatever property is passed to it.
// Returns two lines of code â€” one of the regular pixel values (for older browsers),
// and another with the converted rem values (for everyone else).
//
// Basic usage: @include rem('padding',10px 0 2px 5px);
//              @include rem('font-size',10px);
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}
